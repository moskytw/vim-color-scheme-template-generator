#!/usr/bin/env python
# -*- coding: utf-8 -*-

import re

# target: (start_re, end_re, group_name_re)
targets = [
    (
        # start from
        re.compile("\*Comment"),
        # to
        re.compile("\*Todo"),
        # collect group name
        re.compile("((?:[A-Z][A-Za-z]+)+)"),
    ),
    (
        re.compile("\*Comment"),
        re.compile("\*Todo"),
        # collect the big group name
        re.compile("\*((?:[A-Z][A-Za-z]+)+)"),
    ),
    (
        re.compile("ColorColumn\tused for the columns set with 'colorcolumn'"),
        re.compile("Tooltip\t\tCurrent font, background and foreground of the tooltips."),
        re.compile("^((?:[A-Z][A-Za-z]+)+)\t"),
    ),
]
target_it = iter(targets)

group_names_list = []
line_it = iter([])
target = None
collecting = False
group_names = []
while True:

    try:
        line = next(line_it)
    except StopIteration:
        line_it = open('syntax.txt')
        line = next(line_it)

    if target is None:
        try:
            target = next(target_it)
        except StopIteration:
            break

    start_re, end_re, group_name_re = target

    if start_re.search(line):
        collecting = True

    if not collecting:
        continue

    m = group_name_re.search(line)
    if m:
        group_names.append(m.group(1))

    if end_re.search(line):
        target = None
        collecting = False
        group_names_list.append(group_names)
        group_names = []


print '# --- generated by parse_syntax_txt.py ---'
print
print '#CONVENTIONAL_GROUP_NAMES = %r' % group_names_list[0]
print
print 'CONVENTIONAL_GROUP_NAMES = %r' % group_names_list[1]
print
print 'VIM_GROUP_NAMES = %r' % group_names_list[2]
print
print '# --- end ---'
print
print 'counts: ', map(len, group_names_list)
